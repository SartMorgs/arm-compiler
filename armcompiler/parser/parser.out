Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> code
Rule 1     code -> directives main functions interruptions END
Rule 2     code -> directives main interruptions END
Rule 3     code -> directives main functions END
Rule 4     code -> directives main END
Rule 5     directives -> directive directives
Rule 6     directives -> directive
Rule 7     main -> FUNCTIONNAME PROC commands
Rule 8     functions -> function functions
Rule 9     functions -> function
Rule 10    interruptions -> interruption interruptions
Rule 11    interruptions -> interruption
Rule 12    commands -> command commands
Rule 13    commands -> command
Rule 14    directive -> AREA FUNCTIONNAME COMMA CODE AREATYPE
Rule 15    directive -> ADDRESSNAME EQU NUMBER
Rule 16    function -> FUNCTIONNAME PROC command ENDP
Rule 17    interruption -> INTHANDLER PROC command ENDP
Rule 18    command -> OPCODE NUMBER
Rule 19    command -> OPCODE FUNCTIONNAME
Rule 20    command -> OPCODE body
Rule 21    command -> OPCODE
Rule 22    body -> REGISTER COMMA REGISTER COMMA REGISTER
Rule 23    body -> REGISTER COMMA REGISTER NUMBER
Rule 24    body -> REGISTER COMMA NUMBER
Rule 25    body -> REGISTER COMMA REGISTER
Rule 26    body -> REGISTER

Terminals, with rules where they appear

ADDRESSNAME          : 15
AREA                 : 14
AREATYPE             : 14
CODE                 : 14
COMMA                : 14 22 22 23 24 25
END                  : 1 2 3 4
ENDP                 : 16 17
EQU                  : 15
FUNCTIONNAME         : 7 14 16 19
INTHANDLER           : 17
NUMBER               : 15 18 23 24
OPCODE               : 18 19 20 21
PROC                 : 7 16 17
REGISTER             : 22 22 22 23 23 24 25 25 26
error                : 

Nonterminals, with rules where they appear

body                 : 20
code                 : 0
command              : 12 13 16 17
commands             : 7 12
directive            : 5 6
directives           : 1 2 3 4 5
function             : 8 9
functions            : 1 3 8
interruption         : 10 11
interruptions        : 1 2 10
main                 : 1 2 3 4

Parsing method: LALR

state 0

    (0) S' -> . code
    (1) code -> . directives main functions interruptions END
    (2) code -> . directives main interruptions END
    (3) code -> . directives main functions END
    (4) code -> . directives main END
    (5) directives -> . directive directives
    (6) directives -> . directive
    (14) directive -> . AREA FUNCTIONNAME COMMA CODE AREATYPE
    (15) directive -> . ADDRESSNAME EQU NUMBER

    AREA            shift and go to state 4
    ADDRESSNAME     shift and go to state 5

    code                           shift and go to state 1
    directives                     shift and go to state 2
    directive                      shift and go to state 3

state 1

    (0) S' -> code .



state 2

    (1) code -> directives . main functions interruptions END
    (2) code -> directives . main interruptions END
    (3) code -> directives . main functions END
    (4) code -> directives . main END
    (7) main -> . FUNCTIONNAME PROC commands

    FUNCTIONNAME    shift and go to state 7

    main                           shift and go to state 6

state 3

    (5) directives -> directive . directives
    (6) directives -> directive .
    (5) directives -> . directive directives
    (6) directives -> . directive
    (14) directive -> . AREA FUNCTIONNAME COMMA CODE AREATYPE
    (15) directive -> . ADDRESSNAME EQU NUMBER

    FUNCTIONNAME    reduce using rule 6 (directives -> directive .)
    AREA            shift and go to state 4
    ADDRESSNAME     shift and go to state 5

    directive                      shift and go to state 3
    directives                     shift and go to state 8

state 4

    (14) directive -> AREA . FUNCTIONNAME COMMA CODE AREATYPE

    FUNCTIONNAME    shift and go to state 9


state 5

    (15) directive -> ADDRESSNAME . EQU NUMBER

    EQU             shift and go to state 10


state 6

    (1) code -> directives main . functions interruptions END
    (2) code -> directives main . interruptions END
    (3) code -> directives main . functions END
    (4) code -> directives main . END
    (8) functions -> . function functions
    (9) functions -> . function
    (10) interruptions -> . interruption interruptions
    (11) interruptions -> . interruption
    (16) function -> . FUNCTIONNAME PROC command ENDP
    (17) interruption -> . INTHANDLER PROC command ENDP

    END             shift and go to state 13
    FUNCTIONNAME    shift and go to state 16
    INTHANDLER      shift and go to state 17

    functions                      shift and go to state 11
    interruptions                  shift and go to state 12
    function                       shift and go to state 14
    interruption                   shift and go to state 15

state 7

    (7) main -> FUNCTIONNAME . PROC commands

    PROC            shift and go to state 18


state 8

    (5) directives -> directive directives .

    FUNCTIONNAME    reduce using rule 5 (directives -> directive directives .)


state 9

    (14) directive -> AREA FUNCTIONNAME . COMMA CODE AREATYPE

    COMMA           shift and go to state 19


state 10

    (15) directive -> ADDRESSNAME EQU . NUMBER

    NUMBER          shift and go to state 20


state 11

    (1) code -> directives main functions . interruptions END
    (3) code -> directives main functions . END
    (10) interruptions -> . interruption interruptions
    (11) interruptions -> . interruption
    (17) interruption -> . INTHANDLER PROC command ENDP

    END             shift and go to state 22
    INTHANDLER      shift and go to state 17

    interruptions                  shift and go to state 21
    interruption                   shift and go to state 15

state 12

    (2) code -> directives main interruptions . END

    END             shift and go to state 23


state 13

    (4) code -> directives main END .

    $end            reduce using rule 4 (code -> directives main END .)


state 14

    (8) functions -> function . functions
    (9) functions -> function .
    (8) functions -> . function functions
    (9) functions -> . function
    (16) function -> . FUNCTIONNAME PROC command ENDP

    END             reduce using rule 9 (functions -> function .)
    INTHANDLER      reduce using rule 9 (functions -> function .)
    FUNCTIONNAME    shift and go to state 16

    function                       shift and go to state 14
    functions                      shift and go to state 24

state 15

    (10) interruptions -> interruption . interruptions
    (11) interruptions -> interruption .
    (10) interruptions -> . interruption interruptions
    (11) interruptions -> . interruption
    (17) interruption -> . INTHANDLER PROC command ENDP

    END             reduce using rule 11 (interruptions -> interruption .)
    INTHANDLER      shift and go to state 17

    interruption                   shift and go to state 15
    interruptions                  shift and go to state 25

state 16

    (16) function -> FUNCTIONNAME . PROC command ENDP

    PROC            shift and go to state 26


state 17

    (17) interruption -> INTHANDLER . PROC command ENDP

    PROC            shift and go to state 27


state 18

    (7) main -> FUNCTIONNAME PROC . commands
    (12) commands -> . command commands
    (13) commands -> . command
    (18) command -> . OPCODE NUMBER
    (19) command -> . OPCODE FUNCTIONNAME
    (20) command -> . OPCODE body
    (21) command -> . OPCODE

    OPCODE          shift and go to state 30

    commands                       shift and go to state 28
    command                        shift and go to state 29

state 19

    (14) directive -> AREA FUNCTIONNAME COMMA . CODE AREATYPE

    CODE            shift and go to state 31


state 20

    (15) directive -> ADDRESSNAME EQU NUMBER .

    AREA            reduce using rule 15 (directive -> ADDRESSNAME EQU NUMBER .)
    ADDRESSNAME     reduce using rule 15 (directive -> ADDRESSNAME EQU NUMBER .)
    FUNCTIONNAME    reduce using rule 15 (directive -> ADDRESSNAME EQU NUMBER .)


state 21

    (1) code -> directives main functions interruptions . END

    END             shift and go to state 32


state 22

    (3) code -> directives main functions END .

    $end            reduce using rule 3 (code -> directives main functions END .)


state 23

    (2) code -> directives main interruptions END .

    $end            reduce using rule 2 (code -> directives main interruptions END .)


state 24

    (8) functions -> function functions .

    END             reduce using rule 8 (functions -> function functions .)
    INTHANDLER      reduce using rule 8 (functions -> function functions .)


state 25

    (10) interruptions -> interruption interruptions .

    END             reduce using rule 10 (interruptions -> interruption interruptions .)


state 26

    (16) function -> FUNCTIONNAME PROC . command ENDP
    (18) command -> . OPCODE NUMBER
    (19) command -> . OPCODE FUNCTIONNAME
    (20) command -> . OPCODE body
    (21) command -> . OPCODE

    OPCODE          shift and go to state 30

    command                        shift and go to state 33

state 27

    (17) interruption -> INTHANDLER PROC . command ENDP
    (18) command -> . OPCODE NUMBER
    (19) command -> . OPCODE FUNCTIONNAME
    (20) command -> . OPCODE body
    (21) command -> . OPCODE

    OPCODE          shift and go to state 30

    command                        shift and go to state 34

state 28

    (7) main -> FUNCTIONNAME PROC commands .

    END             reduce using rule 7 (main -> FUNCTIONNAME PROC commands .)
    FUNCTIONNAME    reduce using rule 7 (main -> FUNCTIONNAME PROC commands .)
    INTHANDLER      reduce using rule 7 (main -> FUNCTIONNAME PROC commands .)


state 29

    (12) commands -> command . commands
    (13) commands -> command .
    (12) commands -> . command commands
    (13) commands -> . command
    (18) command -> . OPCODE NUMBER
    (19) command -> . OPCODE FUNCTIONNAME
    (20) command -> . OPCODE body
    (21) command -> . OPCODE

    END             reduce using rule 13 (commands -> command .)
    FUNCTIONNAME    reduce using rule 13 (commands -> command .)
    INTHANDLER      reduce using rule 13 (commands -> command .)
    OPCODE          shift and go to state 30

    command                        shift and go to state 29
    commands                       shift and go to state 35

state 30

    (18) command -> OPCODE . NUMBER
    (19) command -> OPCODE . FUNCTIONNAME
    (20) command -> OPCODE . body
    (21) command -> OPCODE .
    (22) body -> . REGISTER COMMA REGISTER COMMA REGISTER
    (23) body -> . REGISTER COMMA REGISTER NUMBER
    (24) body -> . REGISTER COMMA NUMBER
    (25) body -> . REGISTER COMMA REGISTER
    (26) body -> . REGISTER

  ! shift/reduce conflict for FUNCTIONNAME resolved as shift
    NUMBER          shift and go to state 36
    FUNCTIONNAME    shift and go to state 37
    OPCODE          reduce using rule 21 (command -> OPCODE .)
    END             reduce using rule 21 (command -> OPCODE .)
    INTHANDLER      reduce using rule 21 (command -> OPCODE .)
    ENDP            reduce using rule 21 (command -> OPCODE .)
    REGISTER        shift and go to state 39

  ! FUNCTIONNAME    [ reduce using rule 21 (command -> OPCODE .) ]

    body                           shift and go to state 38

state 31

    (14) directive -> AREA FUNCTIONNAME COMMA CODE . AREATYPE

    AREATYPE        shift and go to state 40


state 32

    (1) code -> directives main functions interruptions END .

    $end            reduce using rule 1 (code -> directives main functions interruptions END .)


state 33

    (16) function -> FUNCTIONNAME PROC command . ENDP

    ENDP            shift and go to state 41


state 34

    (17) interruption -> INTHANDLER PROC command . ENDP

    ENDP            shift and go to state 42


state 35

    (12) commands -> command commands .

    END             reduce using rule 12 (commands -> command commands .)
    FUNCTIONNAME    reduce using rule 12 (commands -> command commands .)
    INTHANDLER      reduce using rule 12 (commands -> command commands .)


state 36

    (18) command -> OPCODE NUMBER .

    OPCODE          reduce using rule 18 (command -> OPCODE NUMBER .)
    END             reduce using rule 18 (command -> OPCODE NUMBER .)
    FUNCTIONNAME    reduce using rule 18 (command -> OPCODE NUMBER .)
    INTHANDLER      reduce using rule 18 (command -> OPCODE NUMBER .)
    ENDP            reduce using rule 18 (command -> OPCODE NUMBER .)


state 37

    (19) command -> OPCODE FUNCTIONNAME .

    OPCODE          reduce using rule 19 (command -> OPCODE FUNCTIONNAME .)
    END             reduce using rule 19 (command -> OPCODE FUNCTIONNAME .)
    FUNCTIONNAME    reduce using rule 19 (command -> OPCODE FUNCTIONNAME .)
    INTHANDLER      reduce using rule 19 (command -> OPCODE FUNCTIONNAME .)
    ENDP            reduce using rule 19 (command -> OPCODE FUNCTIONNAME .)


state 38

    (20) command -> OPCODE body .

    OPCODE          reduce using rule 20 (command -> OPCODE body .)
    END             reduce using rule 20 (command -> OPCODE body .)
    FUNCTIONNAME    reduce using rule 20 (command -> OPCODE body .)
    INTHANDLER      reduce using rule 20 (command -> OPCODE body .)
    ENDP            reduce using rule 20 (command -> OPCODE body .)


state 39

    (22) body -> REGISTER . COMMA REGISTER COMMA REGISTER
    (23) body -> REGISTER . COMMA REGISTER NUMBER
    (24) body -> REGISTER . COMMA NUMBER
    (25) body -> REGISTER . COMMA REGISTER
    (26) body -> REGISTER .

    COMMA           shift and go to state 43
    OPCODE          reduce using rule 26 (body -> REGISTER .)
    END             reduce using rule 26 (body -> REGISTER .)
    FUNCTIONNAME    reduce using rule 26 (body -> REGISTER .)
    INTHANDLER      reduce using rule 26 (body -> REGISTER .)
    ENDP            reduce using rule 26 (body -> REGISTER .)


state 40

    (14) directive -> AREA FUNCTIONNAME COMMA CODE AREATYPE .

    AREA            reduce using rule 14 (directive -> AREA FUNCTIONNAME COMMA CODE AREATYPE .)
    ADDRESSNAME     reduce using rule 14 (directive -> AREA FUNCTIONNAME COMMA CODE AREATYPE .)
    FUNCTIONNAME    reduce using rule 14 (directive -> AREA FUNCTIONNAME COMMA CODE AREATYPE .)


state 41

    (16) function -> FUNCTIONNAME PROC command ENDP .

    FUNCTIONNAME    reduce using rule 16 (function -> FUNCTIONNAME PROC command ENDP .)
    END             reduce using rule 16 (function -> FUNCTIONNAME PROC command ENDP .)
    INTHANDLER      reduce using rule 16 (function -> FUNCTIONNAME PROC command ENDP .)


state 42

    (17) interruption -> INTHANDLER PROC command ENDP .

    INTHANDLER      reduce using rule 17 (interruption -> INTHANDLER PROC command ENDP .)
    END             reduce using rule 17 (interruption -> INTHANDLER PROC command ENDP .)


state 43

    (22) body -> REGISTER COMMA . REGISTER COMMA REGISTER
    (23) body -> REGISTER COMMA . REGISTER NUMBER
    (24) body -> REGISTER COMMA . NUMBER
    (25) body -> REGISTER COMMA . REGISTER

    REGISTER        shift and go to state 44
    NUMBER          shift and go to state 45


state 44

    (22) body -> REGISTER COMMA REGISTER . COMMA REGISTER
    (23) body -> REGISTER COMMA REGISTER . NUMBER
    (25) body -> REGISTER COMMA REGISTER .

    COMMA           shift and go to state 46
    NUMBER          shift and go to state 47
    OPCODE          reduce using rule 25 (body -> REGISTER COMMA REGISTER .)
    END             reduce using rule 25 (body -> REGISTER COMMA REGISTER .)
    FUNCTIONNAME    reduce using rule 25 (body -> REGISTER COMMA REGISTER .)
    INTHANDLER      reduce using rule 25 (body -> REGISTER COMMA REGISTER .)
    ENDP            reduce using rule 25 (body -> REGISTER COMMA REGISTER .)


state 45

    (24) body -> REGISTER COMMA NUMBER .

    OPCODE          reduce using rule 24 (body -> REGISTER COMMA NUMBER .)
    END             reduce using rule 24 (body -> REGISTER COMMA NUMBER .)
    FUNCTIONNAME    reduce using rule 24 (body -> REGISTER COMMA NUMBER .)
    INTHANDLER      reduce using rule 24 (body -> REGISTER COMMA NUMBER .)
    ENDP            reduce using rule 24 (body -> REGISTER COMMA NUMBER .)


state 46

    (22) body -> REGISTER COMMA REGISTER COMMA . REGISTER

    REGISTER        shift and go to state 48


state 47

    (23) body -> REGISTER COMMA REGISTER NUMBER .

    OPCODE          reduce using rule 23 (body -> REGISTER COMMA REGISTER NUMBER .)
    END             reduce using rule 23 (body -> REGISTER COMMA REGISTER NUMBER .)
    FUNCTIONNAME    reduce using rule 23 (body -> REGISTER COMMA REGISTER NUMBER .)
    INTHANDLER      reduce using rule 23 (body -> REGISTER COMMA REGISTER NUMBER .)
    ENDP            reduce using rule 23 (body -> REGISTER COMMA REGISTER NUMBER .)


state 48

    (22) body -> REGISTER COMMA REGISTER COMMA REGISTER .

    OPCODE          reduce using rule 22 (body -> REGISTER COMMA REGISTER COMMA REGISTER .)
    END             reduce using rule 22 (body -> REGISTER COMMA REGISTER COMMA REGISTER .)
    FUNCTIONNAME    reduce using rule 22 (body -> REGISTER COMMA REGISTER COMMA REGISTER .)
    INTHANDLER      reduce using rule 22 (body -> REGISTER COMMA REGISTER COMMA REGISTER .)
    ENDP            reduce using rule 22 (body -> REGISTER COMMA REGISTER COMMA REGISTER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTIONNAME in state 30 resolved as shift
