Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> code
Rule 1     code -> labels codetypes main functions interruptions
Rule 2     code -> codetypes main functions interruptions
Rule 3     code -> labels codetypes main functions
Rule 4     code -> codetypes main functions
Rule 5     code -> labels codetypes main
Rule 6     code -> codetypes main
Rule 7     main -> FUNCTIONNAME PROC commands END
Rule 8     commands -> command commands
Rule 9     commands -> command
Rule 10    labels -> label labels
Rule 11    labels -> label
Rule 12    codetypes -> codetype codetypes
Rule 13    codetypes -> codetype
Rule 14    functions -> function functions
Rule 15    functions -> function
Rule 16    interruptions -> interruption interruption
Rule 17    interruptions -> interruption
Rule 18    label -> ADDRESSNAME EQU NUMBER
Rule 19    codetype -> AREA FUNCTIONNAME COMMA CODE COMMA AREATYPE
Rule 20    function -> FUNCTIONNAME PROC command ENDP
Rule 21    interruption -> INTHANDLER PROC command ENDP
Rule 22    command -> OPCODE NUMBER
Rule 23    command -> OPCODE FUNCTIONNAME
Rule 24    command -> OPCODE body
Rule 25    command -> OPCODE
Rule 26    body -> REGISTER COMMA REGISTER COMMA REGISTER
Rule 27    body -> REGISTER COMMA REGISTER NUMBER
Rule 28    body -> REGISTER COMMA NUMBER
Rule 29    body -> REGISTER COMMA REGISTER
Rule 30    body -> REGISTER

Terminals, with rules where they appear

ADDRESSNAME          : 18
AREA                 : 19
AREATYPE             : 19
CODE                 : 19
COMMA                : 19 19 26 26 27 28 29
END                  : 7
ENDP                 : 20 21
EQU                  : 18
FUNCTIONNAME         : 7 19 20 23
INTHANDLER           : 21
NUMBER               : 18 22 27 28
OPCODE               : 22 23 24 25
PROC                 : 7 20 21
REGISTER             : 26 26 26 27 27 28 29 29 30
error                : 

Nonterminals, with rules where they appear

body                 : 24
code                 : 0
codetype             : 12 13
codetypes            : 1 2 3 4 5 6 12
command              : 8 9 20 21
commands             : 7 8
function             : 14 15
functions            : 1 2 3 4 14
interruption         : 16 16 17
interruptions        : 1 2
label                : 10 11
labels               : 1 3 5 10
main                 : 1 2 3 4 5 6

Parsing method: LALR

state 0

    (0) S' -> . code
    (1) code -> . labels codetypes main functions interruptions
    (2) code -> . codetypes main functions interruptions
    (3) code -> . labels codetypes main functions
    (4) code -> . codetypes main functions
    (5) code -> . labels codetypes main
    (6) code -> . codetypes main
    (10) labels -> . label labels
    (11) labels -> . label
    (12) codetypes -> . codetype codetypes
    (13) codetypes -> . codetype
    (18) label -> . ADDRESSNAME EQU NUMBER
    (19) codetype -> . AREA FUNCTIONNAME COMMA CODE COMMA AREATYPE

    ADDRESSNAME     shift and go to state 6
    AREA            shift and go to state 7

    code                           shift and go to state 1
    labels                         shift and go to state 2
    codetypes                      shift and go to state 3
    label                          shift and go to state 4
    codetype                       shift and go to state 5

state 1

    (0) S' -> code .



state 2

    (1) code -> labels . codetypes main functions interruptions
    (3) code -> labels . codetypes main functions
    (5) code -> labels . codetypes main
    (12) codetypes -> . codetype codetypes
    (13) codetypes -> . codetype
    (19) codetype -> . AREA FUNCTIONNAME COMMA CODE COMMA AREATYPE

    AREA            shift and go to state 7

    codetypes                      shift and go to state 8
    codetype                       shift and go to state 5

state 3

    (2) code -> codetypes . main functions interruptions
    (4) code -> codetypes . main functions
    (6) code -> codetypes . main
    (7) main -> . FUNCTIONNAME PROC commands END

    FUNCTIONNAME    shift and go to state 10

    main                           shift and go to state 9

state 4

    (10) labels -> label . labels
    (11) labels -> label .
    (10) labels -> . label labels
    (11) labels -> . label
    (18) label -> . ADDRESSNAME EQU NUMBER

    AREA            reduce using rule 11 (labels -> label .)
    ADDRESSNAME     shift and go to state 6

    label                          shift and go to state 4
    labels                         shift and go to state 11

state 5

    (12) codetypes -> codetype . codetypes
    (13) codetypes -> codetype .
    (12) codetypes -> . codetype codetypes
    (13) codetypes -> . codetype
    (19) codetype -> . AREA FUNCTIONNAME COMMA CODE COMMA AREATYPE

    FUNCTIONNAME    reduce using rule 13 (codetypes -> codetype .)
    AREA            shift and go to state 7

    codetype                       shift and go to state 5
    codetypes                      shift and go to state 12

state 6

    (18) label -> ADDRESSNAME . EQU NUMBER

    EQU             shift and go to state 13


state 7

    (19) codetype -> AREA . FUNCTIONNAME COMMA CODE COMMA AREATYPE

    FUNCTIONNAME    shift and go to state 14


state 8

    (1) code -> labels codetypes . main functions interruptions
    (3) code -> labels codetypes . main functions
    (5) code -> labels codetypes . main
    (7) main -> . FUNCTIONNAME PROC commands END

    FUNCTIONNAME    shift and go to state 10

    main                           shift and go to state 15

state 9

    (2) code -> codetypes main . functions interruptions
    (4) code -> codetypes main . functions
    (6) code -> codetypes main .
    (14) functions -> . function functions
    (15) functions -> . function
    (20) function -> . FUNCTIONNAME PROC command ENDP

    $end            reduce using rule 6 (code -> codetypes main .)
    FUNCTIONNAME    shift and go to state 18

    functions                      shift and go to state 16
    function                       shift and go to state 17

state 10

    (7) main -> FUNCTIONNAME . PROC commands END

    PROC            shift and go to state 19


state 11

    (10) labels -> label labels .

    AREA            reduce using rule 10 (labels -> label labels .)


state 12

    (12) codetypes -> codetype codetypes .

    FUNCTIONNAME    reduce using rule 12 (codetypes -> codetype codetypes .)


state 13

    (18) label -> ADDRESSNAME EQU . NUMBER

    NUMBER          shift and go to state 20


state 14

    (19) codetype -> AREA FUNCTIONNAME . COMMA CODE COMMA AREATYPE

    COMMA           shift and go to state 21


state 15

    (1) code -> labels codetypes main . functions interruptions
    (3) code -> labels codetypes main . functions
    (5) code -> labels codetypes main .
    (14) functions -> . function functions
    (15) functions -> . function
    (20) function -> . FUNCTIONNAME PROC command ENDP

    $end            reduce using rule 5 (code -> labels codetypes main .)
    FUNCTIONNAME    shift and go to state 18

    functions                      shift and go to state 22
    function                       shift and go to state 17

state 16

    (2) code -> codetypes main functions . interruptions
    (4) code -> codetypes main functions .
    (16) interruptions -> . interruption interruption
    (17) interruptions -> . interruption
    (21) interruption -> . INTHANDLER PROC command ENDP

    $end            reduce using rule 4 (code -> codetypes main functions .)
    INTHANDLER      shift and go to state 25

    interruptions                  shift and go to state 23
    interruption                   shift and go to state 24

state 17

    (14) functions -> function . functions
    (15) functions -> function .
    (14) functions -> . function functions
    (15) functions -> . function
    (20) function -> . FUNCTIONNAME PROC command ENDP

    INTHANDLER      reduce using rule 15 (functions -> function .)
    $end            reduce using rule 15 (functions -> function .)
    FUNCTIONNAME    shift and go to state 18

    function                       shift and go to state 17
    functions                      shift and go to state 26

state 18

    (20) function -> FUNCTIONNAME . PROC command ENDP

    PROC            shift and go to state 27


state 19

    (7) main -> FUNCTIONNAME PROC . commands END
    (8) commands -> . command commands
    (9) commands -> . command
    (22) command -> . OPCODE NUMBER
    (23) command -> . OPCODE FUNCTIONNAME
    (24) command -> . OPCODE body
    (25) command -> . OPCODE

    OPCODE          shift and go to state 30

    commands                       shift and go to state 28
    command                        shift and go to state 29

state 20

    (18) label -> ADDRESSNAME EQU NUMBER .

    ADDRESSNAME     reduce using rule 18 (label -> ADDRESSNAME EQU NUMBER .)
    AREA            reduce using rule 18 (label -> ADDRESSNAME EQU NUMBER .)


state 21

    (19) codetype -> AREA FUNCTIONNAME COMMA . CODE COMMA AREATYPE

    CODE            shift and go to state 31


state 22

    (1) code -> labels codetypes main functions . interruptions
    (3) code -> labels codetypes main functions .
    (16) interruptions -> . interruption interruption
    (17) interruptions -> . interruption
    (21) interruption -> . INTHANDLER PROC command ENDP

    $end            reduce using rule 3 (code -> labels codetypes main functions .)
    INTHANDLER      shift and go to state 25

    interruptions                  shift and go to state 32
    interruption                   shift and go to state 24

state 23

    (2) code -> codetypes main functions interruptions .

    $end            reduce using rule 2 (code -> codetypes main functions interruptions .)


state 24

    (16) interruptions -> interruption . interruption
    (17) interruptions -> interruption .
    (21) interruption -> . INTHANDLER PROC command ENDP

    $end            reduce using rule 17 (interruptions -> interruption .)
    INTHANDLER      shift and go to state 25

    interruption                   shift and go to state 33

state 25

    (21) interruption -> INTHANDLER . PROC command ENDP

    PROC            shift and go to state 34


state 26

    (14) functions -> function functions .

    INTHANDLER      reduce using rule 14 (functions -> function functions .)
    $end            reduce using rule 14 (functions -> function functions .)


state 27

    (20) function -> FUNCTIONNAME PROC . command ENDP
    (22) command -> . OPCODE NUMBER
    (23) command -> . OPCODE FUNCTIONNAME
    (24) command -> . OPCODE body
    (25) command -> . OPCODE

    OPCODE          shift and go to state 30

    command                        shift and go to state 35

state 28

    (7) main -> FUNCTIONNAME PROC commands . END

    END             shift and go to state 36


state 29

    (8) commands -> command . commands
    (9) commands -> command .
    (8) commands -> . command commands
    (9) commands -> . command
    (22) command -> . OPCODE NUMBER
    (23) command -> . OPCODE FUNCTIONNAME
    (24) command -> . OPCODE body
    (25) command -> . OPCODE

    END             reduce using rule 9 (commands -> command .)
    OPCODE          shift and go to state 30

    command                        shift and go to state 29
    commands                       shift and go to state 37

state 30

    (22) command -> OPCODE . NUMBER
    (23) command -> OPCODE . FUNCTIONNAME
    (24) command -> OPCODE . body
    (25) command -> OPCODE .
    (26) body -> . REGISTER COMMA REGISTER COMMA REGISTER
    (27) body -> . REGISTER COMMA REGISTER NUMBER
    (28) body -> . REGISTER COMMA NUMBER
    (29) body -> . REGISTER COMMA REGISTER
    (30) body -> . REGISTER

    NUMBER          shift and go to state 38
    FUNCTIONNAME    shift and go to state 39
    OPCODE          reduce using rule 25 (command -> OPCODE .)
    END             reduce using rule 25 (command -> OPCODE .)
    ENDP            reduce using rule 25 (command -> OPCODE .)
    REGISTER        shift and go to state 41

    body                           shift and go to state 40

state 31

    (19) codetype -> AREA FUNCTIONNAME COMMA CODE . COMMA AREATYPE

    COMMA           shift and go to state 42


state 32

    (1) code -> labels codetypes main functions interruptions .

    $end            reduce using rule 1 (code -> labels codetypes main functions interruptions .)


state 33

    (16) interruptions -> interruption interruption .

    $end            reduce using rule 16 (interruptions -> interruption interruption .)


state 34

    (21) interruption -> INTHANDLER PROC . command ENDP
    (22) command -> . OPCODE NUMBER
    (23) command -> . OPCODE FUNCTIONNAME
    (24) command -> . OPCODE body
    (25) command -> . OPCODE

    OPCODE          shift and go to state 30

    command                        shift and go to state 43

state 35

    (20) function -> FUNCTIONNAME PROC command . ENDP

    ENDP            shift and go to state 44


state 36

    (7) main -> FUNCTIONNAME PROC commands END .

    FUNCTIONNAME    reduce using rule 7 (main -> FUNCTIONNAME PROC commands END .)
    $end            reduce using rule 7 (main -> FUNCTIONNAME PROC commands END .)


state 37

    (8) commands -> command commands .

    END             reduce using rule 8 (commands -> command commands .)


state 38

    (22) command -> OPCODE NUMBER .

    OPCODE          reduce using rule 22 (command -> OPCODE NUMBER .)
    END             reduce using rule 22 (command -> OPCODE NUMBER .)
    ENDP            reduce using rule 22 (command -> OPCODE NUMBER .)


state 39

    (23) command -> OPCODE FUNCTIONNAME .

    OPCODE          reduce using rule 23 (command -> OPCODE FUNCTIONNAME .)
    END             reduce using rule 23 (command -> OPCODE FUNCTIONNAME .)
    ENDP            reduce using rule 23 (command -> OPCODE FUNCTIONNAME .)


state 40

    (24) command -> OPCODE body .

    OPCODE          reduce using rule 24 (command -> OPCODE body .)
    END             reduce using rule 24 (command -> OPCODE body .)
    ENDP            reduce using rule 24 (command -> OPCODE body .)


state 41

    (26) body -> REGISTER . COMMA REGISTER COMMA REGISTER
    (27) body -> REGISTER . COMMA REGISTER NUMBER
    (28) body -> REGISTER . COMMA NUMBER
    (29) body -> REGISTER . COMMA REGISTER
    (30) body -> REGISTER .

    COMMA           shift and go to state 45
    OPCODE          reduce using rule 30 (body -> REGISTER .)
    END             reduce using rule 30 (body -> REGISTER .)
    ENDP            reduce using rule 30 (body -> REGISTER .)


state 42

    (19) codetype -> AREA FUNCTIONNAME COMMA CODE COMMA . AREATYPE

    AREATYPE        shift and go to state 46


state 43

    (21) interruption -> INTHANDLER PROC command . ENDP

    ENDP            shift and go to state 47


state 44

    (20) function -> FUNCTIONNAME PROC command ENDP .

    FUNCTIONNAME    reduce using rule 20 (function -> FUNCTIONNAME PROC command ENDP .)
    INTHANDLER      reduce using rule 20 (function -> FUNCTIONNAME PROC command ENDP .)
    $end            reduce using rule 20 (function -> FUNCTIONNAME PROC command ENDP .)


state 45

    (26) body -> REGISTER COMMA . REGISTER COMMA REGISTER
    (27) body -> REGISTER COMMA . REGISTER NUMBER
    (28) body -> REGISTER COMMA . NUMBER
    (29) body -> REGISTER COMMA . REGISTER

    REGISTER        shift and go to state 48
    NUMBER          shift and go to state 49


state 46

    (19) codetype -> AREA FUNCTIONNAME COMMA CODE COMMA AREATYPE .

    AREA            reduce using rule 19 (codetype -> AREA FUNCTIONNAME COMMA CODE COMMA AREATYPE .)
    FUNCTIONNAME    reduce using rule 19 (codetype -> AREA FUNCTIONNAME COMMA CODE COMMA AREATYPE .)


state 47

    (21) interruption -> INTHANDLER PROC command ENDP .

    INTHANDLER      reduce using rule 21 (interruption -> INTHANDLER PROC command ENDP .)
    $end            reduce using rule 21 (interruption -> INTHANDLER PROC command ENDP .)


state 48

    (26) body -> REGISTER COMMA REGISTER . COMMA REGISTER
    (27) body -> REGISTER COMMA REGISTER . NUMBER
    (29) body -> REGISTER COMMA REGISTER .

    COMMA           shift and go to state 50
    NUMBER          shift and go to state 51
    OPCODE          reduce using rule 29 (body -> REGISTER COMMA REGISTER .)
    END             reduce using rule 29 (body -> REGISTER COMMA REGISTER .)
    ENDP            reduce using rule 29 (body -> REGISTER COMMA REGISTER .)


state 49

    (28) body -> REGISTER COMMA NUMBER .

    OPCODE          reduce using rule 28 (body -> REGISTER COMMA NUMBER .)
    END             reduce using rule 28 (body -> REGISTER COMMA NUMBER .)
    ENDP            reduce using rule 28 (body -> REGISTER COMMA NUMBER .)


state 50

    (26) body -> REGISTER COMMA REGISTER COMMA . REGISTER

    REGISTER        shift and go to state 52


state 51

    (27) body -> REGISTER COMMA REGISTER NUMBER .

    OPCODE          reduce using rule 27 (body -> REGISTER COMMA REGISTER NUMBER .)
    END             reduce using rule 27 (body -> REGISTER COMMA REGISTER NUMBER .)
    ENDP            reduce using rule 27 (body -> REGISTER COMMA REGISTER NUMBER .)


state 52

    (26) body -> REGISTER COMMA REGISTER COMMA REGISTER .

    OPCODE          reduce using rule 26 (body -> REGISTER COMMA REGISTER COMMA REGISTER .)
    END             reduce using rule 26 (body -> REGISTER COMMA REGISTER COMMA REGISTER .)
    ENDP            reduce using rule 26 (body -> REGISTER COMMA REGISTER COMMA REGISTER .)

